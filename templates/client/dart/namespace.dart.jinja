library {{ conf.inferred_package_name_snake_case() }};

import 'dart:convert';
import 'package:json_annotation/json_annotation.dart';
import 'package:http/http.dart' as http;
import 'package:decimal/decimal.dart';

part '{{ conf.inferred_package_name_snake_case() }}.g.dart';

@JsonSerializable(explicitToJson: true, includeIfNull: true, createFactory: false)
class ExplicitNull {
  dynamic set;
  ExplicitNull();
  Map<String, dynamic> toJson() => _$ExplicitNullToJson(this);
}

dynamic anyToJson(dynamic any) {
  if (any is List) {
    return any.map((e) => anyToJson(e)).toList();
  } else if (any is int) {
    return any;
  } else if (any is double) {
    return any;
  } else if (any is bool) {
    return any;
  } else if (any is String) {
    return any;
  } else if (any == null) {
    return null;
  } else if (any is DateTime) {
    return any.toIso8601String();
  } else {
    return any.toJson();
  }
}

String fromTeoDate(Map<String, dynamic> arg) {
  return arg["\$date"]! as String
}

DateTime fromTeoDateTime(Map<String, dynamic> arg) {
  return DateTime.parse(arg["\$datetime"]! as String);
}

Decimal fromTeoDecimal(Map<String, dynamic> arg) {
  return Decimal.parse(arg["\$decimal"]! as String);
}

{% for e in outline.enums() %}
{% if !e.members().is_empty() %}
/// ## {{ e.title() }}
///
/// {{ e.desc }}
enum {{ e.name() }} {
{%- for m in e.members() %}

    /// ### {{ m.title() }}
    ///
    /// {{ m.desc() }}
    @JsonValue("{{ m.name() }}") {{ m.name()|camelcase }},
{%- endfor %}
}
{%- endif %}
{%- endfor %}

{% for interface in outline.interfaces() %}
@JsonSerializable(explicitToJson: true, includeIfNull: false{% if !interface.is_output_result() %}, createFactory: false{% endif %})
class {{ interface.name() }}{{ interface.generics_declaration() }} {
{%- for field in interface.fields_optional_at_last() %}
    {%- if should_escape.call(field.name()) %}
    @JsonKey(name: '{{ field.name() }}')
    {%- else if interface.is_output_result() && field.type().is_datetime() %}
    @JsonKey(fromJson: fromTeoDateTime)
    {%- else if interface.is_output_result() && field.type().is_decimal() %}
    @JsonKey(fromJson: fromTeoDecimal)
    {%- endif %}
    {{ lookup.call(field.type()).unwrap().borrow() }}{%- if type_is_not_dynamic(lookup.call(field.type()).unwrap().borrow()) && (field.type().is_optional() || interface.is_output_result()) %}?{%- endif %} {{ field.name()|escape_dart }};
    {%- endfor %}
    {{ interface.name() }}({
    {%- for field in interface.fields_optional_at_last() %}
        {% if !(type_is_dynamic(lookup.call(field.type()).unwrap().borrow()) || field.type().is_optional() || interface.is_output_result()) %}required {% endif %}this.{{ field.name()|escape_dart }},
    {%- endfor %}
    });
    {%- if interface.is_output_result() %}
    factory {{ interface.name() }}.fromJson(Map<String, dynamic> json) => _${{ interface.name() }}FromJson(json);
    {%- endif %}
    Map<String, dynamic> toJson() => _${{ interface.name() }}ToJson(this);
}
{% endfor %}