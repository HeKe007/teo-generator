library {{ conf.inferred_package_name_snake_case() }};

import 'dart:convert';
import 'package:json_annotation/json_annotation.dart';
import 'package:http/http.dart' as http;
import 'package:decimal/decimal.dart';
import "{{ import_dots(namespace) }}_helper.dart";

{% if namespace.is_main() %}
part '{{ conf.inferred_package_name_snake_case() }}.g.dart';
{% else %}
part '{{ namespace.path().last().unwrap() }}.g.dart';
{% endif %}

{% for e in outline.enums() %}
{% if !e.members().is_empty() %}
/// ## {{ e.title() }}
///
/// {{ e.desc }}
enum {{ e.name() }} {
{%- for m in e.members() %}

    /// ### {{ m.title() }}
    ///
    /// {{ m.desc() }}
    @JsonValue("{{ m.name() }}") {{ m.name()|camelcase }},
{%- endfor %}
}
{%- endif %}
{%- endfor %}

{% for interface in outline.interfaces() %}
@JsonSerializable(explicitToJson: true, includeIfNull: false{% if !interface.is_output_result() %}{% endif %}{% if !interface.generic_names().is_empty() %}, genericArgumentFactories: true{% endif %})
class {{ interface.name() }}{{ interface.generics_declaration() }} {
{%- for field in interface.fields_optional_at_last() %}
    {%- if should_escape(field.name()) %}
    @JsonKey(name: '{{ field.name() }}')
    {%- else if interface.is_output_result() && field.type().is_datetime() %}
    @JsonKey(fromJson: fromTeoDateTime)
    {%- else if interface.is_output_result() && field.type().is_decimal() %}
    @JsonKey(fromJson: fromTeoDecimal)
    {%- endif %}
    {{ lookup.call(field.type()).unwrap() }}{%- if type_is_not_dynamic(lookup.call(field.type()).unwrap().borrow()) && (field.type().is_optional() || interface.is_output_result()) %}?{%- endif %} {{ field.name()|escape_dart }};
{%- endfor %}
    {{ interface.name() }}({
    {%- for field in interface.fields_optional_at_last() %}
        {% if !(type_is_dynamic(lookup.call(field.type()).unwrap().borrow()) || field.type().is_optional() || interface.is_output_result()) %}required {% endif %}this.{{ field.name()|escape_dart }},
    {%- endfor %}
    });
    factory {{ interface.name() }}.fromJson(Map<String, dynamic> json{{ from_json_parameters(interface.generic_names()) }}) => _${{ interface.name() }}FromJson(json{{ from_json_arguments(interface.generic_names()) }});
    Map<String, dynamic> toJson() => _${{ interface.name() }}ToJson(this{{ to_json_arguments(interface.generic_names()) }});
}
{% endfor %}

{% if !namespace.is_std() %}
{% for delegate in outline.delegates() %}
class {{ delegate.name_with_conf(conf.class_name().to_string()) }} {
  final Map<String, String>? _headers;
  {{ delegate.name_with_conf(conf.class_name().to_string()) }}(this._headers);

  {% for namespace_item in delegate.namespace_items() %}
  {% if !namespace_item.is_std() %}
  late {{ namespace_item.path().join(".") }} {{ namespace_item.property_name() }} = {{ namespace_item.path().join(".") }}(_headers);
  {% endif %}
  {% endfor %}

  {% for group_item in delegate.group_items() %}
  late {{ group_item.path().join(".") }} {{ group_item.property_name() }} = {{ group_item.path().join(".") }}(_headers);
  {% endfor %}

  {% for request_item in delegate.request_items() %}
  Future<{{ lookup.call(request_item.output_type()).unwrap() }}> {{ request_item.name() }}({{ lookup.call(request_item.input_type()).unwrap() }} args) async {
    return await request("", args, this._headers);
  }
  {% endfor %}
}
{% endfor %}
{% endif %}

{% if namespace.is_main() %}
final {{ conf.object_name }} = {{ conf.object_name|capitalize_first }}(null);
{% endif %}