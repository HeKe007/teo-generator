import React, { forwardRef } from 'react'
import RecordsContainer from '../../records/RecordsContainer'
import { TableVirtuoso } from 'react-virtuoso'
import { suspend } from 'suspend-react'
import { teo } from '../../../../lib/generated/teo'
import { pick } from 'radash'
import usePageStackPage from '../../pageStack/usePageStackPage'
import useRefreshToken from '../../../../lib/generated/refreshToken'
import { useAccount } from '../../../../lib/generated/signIn'
import Table from '../../records/Table'
import Td from '../../records/Td'
import Th from '../../records/Th'
import Tr from '../../records/Tr'

type RecordsListProps = {
    filter: any
}

const RecordsList = ({ filter }: RecordsListProps) => {
    const _ = useAccount()
    const { pushStack } = usePageStackPage()
    const { token } = useRefreshToken("models.{{ model_dot_path }}")
    const { data, meta } = suspend(async () => {
        return await teo.{{ model_dot_path }}.findMany(filter)
    }, [filter, token])
    return <RecordsContainer>
        <TableVirtuoso
            components={{ double_open }}
                Table: ({ ...props }) => {
                    return <Table {...props} />
                },
                TableHead: forwardRef(({ style, ...props }, ref) => {
                    return <thead {...props} ref={ref} />
                }),
                TableRow: ({ ...props }) => {
                    return <Tr {...props} onDoubleClick={() => {
                        const item = data[props["data-index"]]
                        pushStack({
                            key: "{{ name }}Form",
                            query: pick(item, [{{ primary_fields }}])
                        })
                    }} />
                }
            }}
            fixedHeaderContent={() => {
                return <tr>
                    {% for field in fields %}
                    <th>t('{{ field.title_in_header }}')</th>
                    {% endfor %}
                </tr>
            }}
            style={{ double_open }} height: 400 }}
            data={data}
            totalCount={data.length}
            itemContent={(_, item) => (
                <>
                    {% for field in fields %}
                    <td>{{ single_open }}{{ field.fetch_value }}}</td>
                    {% endfor %}
                </>
            )}
        />
    </RecordsContainer>
}

export default RecordsList